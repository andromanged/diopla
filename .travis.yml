sudo: false
language: cpp

matrix:
  include:

  # Ubuntu, g++-8
  - os: linux
    dist: trusty
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
          - libboost1.55-all-dev
          - libssl-dev
          - g++-8
          - gcc-8
    env:
    - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - LABEL="linux-g++-8"
    - RELEASE_FILENAME="violetminer-linux"
    - RELEASE_FILETYPE="tar.gz"

  # Ubuntu, clang-6
  - os: linux
    dist: trusty
    compiler: clang
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-trusty-6.0
        packages:
          - libboost1.55-all-dev
          - libssl-dev
          - clang-6.0
          - libstdc++-7-dev
    env:
    - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
    - LABEL="linux"
    - RELEASE_FILENAME="violetminer-linux"
    - RELEASE_FILETYPE="tar.gz"
    - _DEPLOYABLE="true"

  # OSX, clang
  - os: osx
    osx_image: xcode10
    compiler: clang
    env:
    - LABEL="osx"
    - RELEASE_FILENAME="violetminer-osx"
    - RELEASE_FILETYPE="tar.gz"
    - _DEPLOYABLE="true"
    install:
    # Need to make sure that we have openssl installed
    - travis_retry brew install openssl || travis_retry brew upgrade openssl
    - brew link --force openssl
    - ln -s /usr/local/opt/openssl/include/openssl /usr/local/include

  # Arm (aarch64) cross compile
  - os: linux
    env:
    - MATRIX_EVAL="CC=aarch64-linux-gnu-gcc && CXX=aarch64-linux-gnu-g++"
    - LABEL="aarch64"
    - RELEASE_FILENAME="violetminer-armv8"
    - RELEASE_FILETYPE="tar.gz"
    - _DEPLOYABLE="true"

  # Windows, MSVC
  - os: windows
    env:
    - LABEL="windows"
    - MSBUILD_PATH="/C/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin"
    - RELEASE_FILENAME="violetminer-win64"
    - RELEASE_FILETYPE="zip"
    - _DEPLOYABLE="true"
    - CUDA_VER=10.1
    - CUDA_ARCHIVE="cuda_10.1.243_426.00_win10.exe"
    script:
    - wget -nv https://developer.download.nvidia.com/compute/cuda/$CUDA_VER/Prod/local_installers/$CUDA_ARCHIVE
    - PowerShell Start-Process -FilePath "$CUDA_ARCHIVE" -ArgumentList "-s nvcc_$CUDA_VER" -Wait -NoNewWindow
    #- START /WAIT $CUDA_ARCHIVE -s nvcc_$CUDA_VER
    - 7z x $CUDA_ARCHIVE
    - ls "C:\Program Files (x86)\Microsoft Visual Studio"
    - ls "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Microsoft\VC"
    - copy CUDAVisualStudioIntegration\\extras\\visual_studio_integration\\MSBuildExtensions\\* "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Microsoft\VC\v150\BuildCustomizations"
    - set PATH="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$CUDA_VER\bin\";$PATH
    - set CUDACXX="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$CUDA_VER\bin\nvcc"
    - mkdir build && cd build
    - export PATH=$MSBUILD_PATH:$PATH
    - cmake -G "Visual Studio 15 2017 Win64"
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_VS_PLATFORM_TOOLSET_CUDA=10.1
    - MSBuild violetminer.sln /p:Configuration=Release /m
    - cd Release
    - mkdir $RELEASE_FILENAME
    - copy violetminer.exe $RELEASE_FILENAME
    - 7z a $RELEASE_FILENAME.$RELEASE_FILETYPE $RELEASE_FILENAME

before_install:
- eval $MATRIX_EVAL

script:
- eval $MATRIX_EVAL
# If we're cross compiling aarch64, make sure our build enivornment is setup
# we do this in the script stage because this happens after the repo is cloned
- if [[ "$LABEL" == "aarch64" ]]; then source scripts/prep-aarch64.sh ; fi
- mkdir build && cd build
- cmake -DCMAKE_BUILD_TYPE=Release ..
- make -j2
- if [[ "$LABEL" != "aarch64" ]]; then ./argon2-cpp-test ; fi
- mkdir $RELEASE_FILENAME
- mv violetminer $RELEASE_FILENAME
- tar cvfz $RELEASE_FILENAME.tar.gz $RELEASE_FILENAME

deploy:
    - provider: releases
      api_key: $GITHUB_TOKEN
      file: ${RELEASE_FILENAME}.${RELEASE_FILETYPE}
      skip_cleanup: true
      on:
        tags: true
        condition: "$_DEPLOYABLE = true"
